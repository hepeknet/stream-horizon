CREATE TABLE RWH_RISK_FACT
(
  RWH_DEAL_DIM_WID        INTEGER,
  RWH_PRDCT_DIM_WID       INTEGER,
  RWH_FACTOR_DIM_WID      INTEGER,
  RWH_UNDERLYING_DIM_WID  INTEGER,
  RWH_CURVETYPE_DIM_WID   INTEGER,
  RWH_DATE_DIM_WID        INTEGER,
  RWH_CURRENCY_DIM_WID    INTEGER,
  RWH_ORG_DIM_WID         INTEGER,
  RWH_PARTY_DIM_WID       INTEGER,
  RWH_PORTFOLIO_DIM_WID   INTEGER,
  RWH_ETL_BATCH_WID       INTEGER,
  RWH_DEALRISK_WID        INTEGER,
  RWH_ERROR_DIM_WID       INTEGER,-- always set to -1
  RISK_VALUE              INTEGER,--LocalValue
  BASE_VALUE              INTEGER,--BaseValue
  LOCAL_VALUE             INTEGER,--RiskValue
  CURRENT_FLAG            BOOL,-- always hardcode to 'Y'
  ISADJUSTMENT            BOOL,-- always hardcode to 'N'
  RWH_NOTIFICATION_WID    INTEGER
);

CREATE TABLE RWH_UNDERLYING_DIM
(
  UNDERLYING_DIM_WID    INTEGER NOT NULL AUTO_INCREMENT,
  UNDERLYING_NAME       VARCHAR(300),
  UNDERLYING_DESC       VARCHAR(1000),
  RISK_UNDERLYING_NAME  VARCHAR(300),
  RISK_UNDERLYING_DESC  VARCHAR(1000),
  PRIMARY KEY(UNDERLYING_DIM_WID)
)

CREATE UNIQUE INDEX underlying_uindex ON RWH_UNDERLYING_DIM (UNDERLYING_NAME, RISK_UNDERLYING_NAME);

CREATE TABLE RWH_RISK_STATUS_DIM
(
  RISK_STATUS_DIM_WID  INTEGER NOT NULL AUTO_INCREMENT,
  STATUS_CODE          VARCHAR(300),
  STATUS_DESCRIPTION   VARCHAR(300),
  STATUS_FLAG          BOOL,
  PRIMARY KEY(RISK_STATUS_DIM_WID)
);

CREATE UNIQUE INDEX rwh_risk_status_uindex ON RWH_RISK_STATUS_DIM (STATUS_CODE, STATUS_DESCRIPTION, STATUS_FLAG);

CREATE TABLE RWH_PRODUCT_DIM
(
  PRODUCT_DIM_WID          INTEGER NOT NULL AUTO_INCREMENT,
  PRODUCT_CODE             VARCHAR(255),
  PRODUCT_HIERARCHY_LVL1   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL2   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL3   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL4   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL5   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL6   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL7   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL8   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL9   VARCHAR(255),
  PRODUCT_HIERARCHY_LVL10  VARCHAR(255),
  PRODUCT_HIERARCHY_LVL11  VARCHAR(255),
  PRODUCT_HIERARCHY_LVL12  VARCHAR(255),
  PRIMARY KEY(PRODUCT_DIM_WID)
);

CREATE UNIQUE INDEX RWH_PRODUCT_DIM_uindex ON RWH_PRODUCT_DIM (PRODUCT_CODE);

CREATE TABLE RWH_PORTFOLIO_DIM
(
  PORTFOLIO_DIM_WID  INTEGER NOT NULL AUTO_INCREMENT,
  PORTFOLIO_NAME     VARCHAR(700),
  PRIMARY KEY(PORTFOLIO_DIM_WID)
);

CREATE UNIQUE INDEX RWH_PORTFOLIO_DIM_uindex ON RWH_PORTFOLIO_DIM (PORTFOLIO_NAME);

CREATE TABLE RWH_PARTY_DIM
(
  PARTY_DIM_WID  INTEGER NOT NULL AUTO_INCREMENT,
  PARTY_NAME     VARCHAR(700),
  PRIMARY KEY(PARTY_DIM_WID)
);

CREATE UNIQUE INDEX RWH_PARTY_DIM_uindex ON RWH_PARTY_DIM (PARTY_NAME);

CREATE TABLE RWH_ORG_DIM
(
  ORG_DIM_WID               INTEGER NOT NULL AUTO_INCREMENT,
  ORG_LEVEL                 INTEGER,
  ORG_NAME                  VARCHAR(255 ),
  ORG_HIERARCHY_LVL1        VARCHAR(255 ),
  ORG_HIERARCHY_LVL2        VARCHAR(255 ),
  ORG_HIERARCHY_LVL3        VARCHAR(255 ),
  ORG_HIERARCHY_LVL4        VARCHAR(255 ),
  ORG_HIERARCHY_LVL5        VARCHAR(255 ),
  ORG_HIERARCHY_LVL6        VARCHAR(255 ),
  ORG_HIERARCHY_LVL7        VARCHAR(255 ),
  ORG_HIERARCHY_LVL8        VARCHAR(255 ),
  ORG_HIERARCHY_LVL9        VARCHAR(255 ),
  ORG_HIERARCHY_LVL10       VARCHAR(255 ),
  ORG_HIERARCHY_LVL11       VARCHAR(255 ),
  ORG_HIERARCHY_LVL12       VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL1   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL2   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL3   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL4   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL5   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL6   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL7   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL8   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL9   VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL10  VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL11  VARCHAR(255 ),
  CURR_ORG_HIERARCHY_LVL12  VARCHAR(255 ),
  VALID_FROM_DATE           DATE,
  VALID_TO_DATE             DATE,
  CURRENT_FLAG              BOOL,
  ETL_BATCH_FILE_ID         INTEGER,
  PARIS_ID                  INTEGER,
  PRIMARY KEY(ORG_DIM_WID)
);

CREATE UNIQUE INDEX RWH_ORG_DIM_uindex ON RWH_ORG_DIM (ORG_NAME);

CREATE TABLE RWH_FACTOR_DIM
(
  FACTOR_DIM_WID      INTEGER NOT NULL AUTO_INCREMENT,
  BUCKET_CODE         VARCHAR(4000 ),
  FACTOR_NAME         VARCHAR(4000 ),
  BUCKET1_NAME        VARCHAR(4000 ),
  BUCKET1_DESC        VARCHAR(4000 ),
  BUCKET1_SORTORDER   INTEGER,
  BUCKET2_NAME        VARCHAR(4000 ),
  BUCKET2_DESC        VARCHAR(4000 ),
  BUCKET2_SORTORDER   INTEGER,
  BUCKET3_NAME        VARCHAR(2000 ),
  BUCKET3_DESC        VARCHAR(2000 ),
  BUCKET3_SORTORDER   INTEGER,
  BUCKET4_NAME        VARCHAR(2000 ),
  BUCKET4_DESC        VARCHAR(2000 ),
  BUCKET4_SORTORDER   INTEGER,
  BUCKET5_NAME        VARCHAR(2000 ),
  BUCKET5_DESC        VARCHAR(2000 ),
  BUCKET5_SORTORDER   INTEGER,
  BUCKET6_NAME        VARCHAR(2000 ),
  BUCKET6_DESC        VARCHAR(2000 ),
  BUCKET6_SORTORDER   INTEGER,
  BUCKET7_NAME        VARCHAR(2000 ),
  BUCKET7_DESC        VARCHAR(2000 ),
  BUCKET7_SORTORDER   INTEGER,
  BUCKET8_NAME        VARCHAR(2000 ),
  BUCKET8_DESC        VARCHAR(2000 ),
  BUCKET8_SORTORDER   INTEGER,
  BUCKET9_NAME        VARCHAR(2000 ),
  BUCKET9_DESC        VARCHAR(2000 ),
  BUCKET9_SORTORDER   INTEGER,
  BUCKET10_NAME       VARCHAR(2000 ),
  BUCKET10_DESC       VARCHAR(2000 ),
  BUCKET10_SORTORDER  INTEGER,
  PRIMARY KEY(FACTOR_DIM_WID)
);

CREATE TABLE RWH_DEAL_DIM
(
  DEAL_DIM_WID               INTEGER NOT NULL AUTO_INCREMENT,
  SOURCENAME                 VARCHAR(500 ),
  DEAL_TYPE                  VARCHAR(500 ),
  DEAL_ID                    VARCHAR(500 ),
  DEAL_VERSION               INTEGER,
  DEAL_WHATIF_UID            VARCHAR(500 ),
  COMPONENT_CODE             VARCHAR(500 ),
  DEAL_DATE                  DATE,
  DEAL_AMENDED               DATE,
  DEAL_STATE                 VARCHAR(1000 ),
  DEAL_STRUCTURE_CD          VARCHAR(1000 ),
  DEAL_ADDITIONAL_INFO       BLOB,
  MATURITY_DATE              DATE,
  DEAL_ADDITIONAL_INFO_CUBE  VARCHAR(4000 ),
  DEALINCUBEGENERATION       INTEGER,
  PRIMARY KEY(DEAL_DIM_WID)
);

CREATE UNIQUE INDEX RWH_DEAL_DIM_uindex ON RWH_DEAL_DIM (SOURCENAME, DEAL_TYPE, DEAL_ID, DEAL_VERSION, DEAL_WHATIF_UID, COMPONENT_CODE);

CREATE TABLE RWH_DATE_DIM
(
  DATE_DIM_WID       INTEGER NOT NULL AUTO_INCREMENT,
  BUSINESS_DATE      TIMESTAMP(6),
  DAYOFWEEK          VARCHAR(9 ),
  SHORTDAYOFWEEK     CHAR(3 ),
  YR                 INTEGER(4),
  MONTHNAME          VARCHAR(9 ),
  MONTHNAMESHORT     CHAR(3 ),
  MONTHNUM           INTEGER(2),
  DAYOFMONTH         INTEGER(2),
  DAYOFYEAR          INTEGER(3),
  WEEKINTEGER         INTEGER(2),
  PREV_DATE_DIM_WID  INTEGER,
  PRIMARY KEY(DATE_DIM_WID)
);

CREATE UNIQUE INDEX RWH_DATE_DIM_uindex ON RWH_DATE_DIM (BUSINESS_DATE);

CREATE TABLE RWH_CURVETYPE_DIM
(
  CURVETYPE_DIM_WID  INTEGER NOT NULL AUTO_INCREMENT,
  CURVE_TYPE_CODE    VARCHAR(400 ),
  CURVE_TYPE_DESC    VARCHAR(1000 ),
  PRICING_MODEL      VARCHAR(300 ),
  PRIMARY KEY(CURVETYPE_DIM_WID)
);

CREATE UNIQUE INDEX RWH_CURVETYPE_DIM_uindex ON RWH_CURVETYPE_DIM (CURVE_TYPE_CODE, PRICING_MODEL);

CREATE TABLE RWH_CURRENCY_DIM
(
  CURRENCY_DIM_WID     INTEGER NOT NULL AUTO_INCREMENT,
  BASE_CURRENCY        VARCHAR(200 ),
  BASE_CURRENCY_DESC   VARCHAR(4000 ),
  RISK_CURRENCY        VARCHAR(200 ),
  RISK_CURRENCY_DESC   VARCHAR(4000 ),
  LOCAL_CURRENCY       VARCHAR(200 ),
  LOCAL_CURRENCY_DESC  VARCHAR(4000 ),
  PRIMARY KEY(CURRENCY_DIM_WID)
);

CREATE UNIQUE INDEX RWH_CURRENCY_DIM_uindex ON RWH_CURRENCY_DIM (BASE_CURRENCY, RISK_CURRENCY, LOCAL_CURRENCY);

CREATE TABLE RWHSTG_ETL_BATCH
(
  BATCH_ID                      INTEGER NOT NULL AUTO_INCREMENT,--not used
  FILE_ID                       INTEGER,--file id
  SOURCE_SYSTEM                 VARCHAR(255 ),--not used
  FILE_NAME                     VARCHAR(255 ),
  FILE_TYPE				  VARCHAR(255 ), --substring of file name  substr(fineName,1,7)  example value:  CSRISKFEED  ILI CSNOTIF
  FILE_CREATED_TIMESTAMP DATE,--kada je file kreiran u direcotry
  BUSINESS_DATE DATE, --    businessDate  (data files only)
  INTEGER_OF_ROWS INTEGER,--INTEGEROfRows (data files only)
  USERNAME_REQUESTED   VARCHAR(255 ),--fileUserName (data files only)
  LOCATION   VARCHAR(255 ), --location (data files only)
  QL_VERSION VARCHAR(255 ),--qlVersion   (data files only)
  START_TIMESTAMP               DATE,--etl start timestamp  (record creation time of this record in batch table by dispatcher)
  CASPAR_GUID                   VARCHAR(255 ),--guid
  RERUN_GUID                    VARCHAR(255 ),--guid
  FILE_VALIDATION_FLAG          BOOL,--S F  same as STAGING_DATA_LOAD_FLAG
  STAGING_DATA_LOAD_FLAG        BOOL,--same as above
  DIMENSION_SWEEP_STATUS        INTEGER,--not used
  FACT_LOAD_FLAG                BOOL, --same as STAGING_DATA_LOAD_FLAG     set to P (or R) if purged and rerun
  END_TIMESTAMP                 DATE,--when we have finished writing to fact table
  ERROR_DESCRIPTION             VARCHAR(4000 ),--
  ALERT_RAISED_TIMESTAMP        DATE,--not used or populated
  BUNDLE_ID                     INTEGER,--not used
  UNIQUE_INTRADAY_REQUEST_NAME  VARCHAR(255 ),
  PARIS_REQUEST_ID              VARCHAR(255 ),--not used
  RERUN_VERSION                 VARCHAR(255 ),--not used
  ANAL_REQUEST_GUID             VARCHAR(255 ),--not used
  EOD_FLAG                      VARCHAR(255 ),--EOD SOD coming from data file
  REQUEST_TIMESTAMP             VARCHAR(255 ),--not used
  RUN_TAG                       VARCHAR(255 ),--london official
  PENDING_SWEEP_STATUS          INTEGER,--not used
  PORTFOLIO                     VARCHAR(1000 ),--portfolio from data file
  VARIANCE_BATCH_ID             INTEGER,--not used
  VARIANCE_FACT_LOAD_FLAG       VARBOOL--not used
);

CREATE UNIQUE INDEX request_notification_uindex ON REQUESTNOTIFICATION (UNIQUENAME, ANALYTICSREQUESTGUID);

CREATE TABLE WAREHOUSE.REQUESTNOTIFICATION--this is control table and dimension at the same time
(
  NOTIFICATIONID                  INTEGER NOT NULL AUTO_INCREMENT, --key
  SOURCE                          VARCHAR(30 ) NOT NULL,--
  UNIQUENAME                      VARCHAR(100 ),--guid
  ANALYTICSREQUESTGUID            VARCHAR(100 ),--guid
  INTEGEROFTASKS                   INTEGER,--not used   
  INTEGEROFFILES                   INTEGER,--data files  must match sum(LOADINCRFILES)  --cube upload condition
  INTEGEROFPERSISTEDTASKS          INTEGER,-- not used ------from notif file   
  INTEGEROFPERSISTEDTRADES         INTEGER,--trades in the file
  INTEGEROFPERSISTEDVALIDVALUES    INTEGER,--records in a file msut match sum(LOADINCRROWS) --cube upload condition
  INTEGEROFPERSISTEDINVALIDVALUES  INTEGER,--not used from notif
  INTEGEROFNOTPERSISTEDTASKS       INTEGER,--not used from notif
  INTEGEROFNOTPERSISTEDTRADES      INTEGER,--not used from notif
  RUNTAG                          VARCHAR(100 ),--from data file    
  BUSINESSDATE                    DATE,
  BATCHTYPE                       VARCHAR(1000 ),
  REQUESTNAME                     VARCHAR(200 ),--uniq intraday req name
  USERNAMEREQUESTED               VARCHAR(100 ),
  PORTFOLIO                       VARCHAR(255 ),
  RERUNGUID                       VARCHAR(100 ),
  RERUNVERSION                    VARCHAR(20 ),
  PERSISTSTATUS                   BOOL,--fact table persist flage Y complete A abandoned P purged R replaced by rerun E complete with dta eror F failed   n incomplete e uncomplete with data erors f uncoplete failed files
  --this is run complete flag replpacement, allows cube upload (cuberequest table)
  PERSISTSTARTTIMESTAMP           TIMESTAMP(6),--creation time of the notification record (this record)
  PERSISTENDTIMESTAMP             TIMESTAMP(6),-- last time of update of PERSISTSTATUS to Y E F only
  REPORTFLAG                      BOOL,--not used
  AGGFLAG                         BOOL,--not used
  VARFLAG                         BOOL,--not used
  LOADINCRFILES                   INTEGER,--how many files loaded so far     not used for adjustments and variance
  LOADINCRROWS                    INTEGER,--same as above for rows....    not used for adjustments and variance
  PORTFOLIODIMWID                 INTEGER,-- portfoio dim wid
  NOTUSED1                        INTEGER
);